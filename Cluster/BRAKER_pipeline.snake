import glob
import re
import sys
from os.path import join 

###############################################################################
# Adapt here so you can get all read pairs and ref:

# directory contained fastq files
datadir="/homedir/charriat/work/Annotation/test_input/"
# Out directory
OutDir = '/homedir/charriat/work/Annotation/test/'
# RNAseq directory
RnaSeqDir='/homedir/charriat/work/Annotation/0_rawdata/rnaseq/'
# Config file for TOOGLE
configFile = '/homedir/charriat/work/Annotation/1_tmp/ToogleConfig/tophatMapping.config.txt'
# Path to protein annotation file 
protRef = '/homedir/charriat/BGPI/becphy/pangenome2017/test70-15/exonerate/70-15_annotated_protein.fa'
# file termination
suffixFile = '_scaffold.fasta'

################################################################################
pathScript = sys.path[0]+'/'

SAMPLES, = glob_wildcards(datadir+"{smp}"+suffixFile)

for smp in SAMPLES:
  	print("Sample " + smp + " will be processed")


rule final:
	input: 
		expand(OutDir+'2_Braker/{smp}/', smp = SAMPLES)
		
rule bamAlignement :
	threads : 2
	input: fasta = datadir+"{smp}"+suffixFile, RNAseq = RnaSeqDir, config = configFile
	output: OutDir+'0_bamAlignement/{smp}/'
	shell :"""
	module load bioinfo/TOGGLE/0.3.6
	toggleGenerator.pl -d {input.RNAseq} -r {input.fasta} -c {input.config} -o {output} 
	"""
	

rule mergeBam :
	threads : 2
	input :  OutDir+'0_bamAlignement/{smp}/'
	output : OutDir+'0_bamAlignement/{smp}/merged_{smp}.accepted_hits.bam'
	shell :"""
	module load bioinfo/samtools/1.3
	ls {input}*.accepted_hits.bam > {input}bamList
	samtools merge -f -b {input}bamList -c {output}
	"""

rule sortBam :
	threads : 2
	input : OutDir+'0_bamAlignement/{smp}/merged_{smp}.accepted_hits.bam'
	output : OutDir+'0_bamAlignement/{smp}/merged_{smp}.accepted_hits_sort.bam'
	shell:"""
	java -jar /usr/local/bioinfo/picard-tools/2.7.0/picard.jar SortSam I={input} O={output} SORT_ORDER=coordinate
	"""

rule bam2hints :
	threads : 1
	input : file = OutDir+'0_bamAlignement/{smp}/merged_{smp}.accepted_hits_sort.bam', script =pathScript+'filterHints.r', path = OutDir+'0_bamAlignement/{smp}/'
	output : bam2hints = OutDir+'0_bamAlignement/{smp}/hints_{smp}.raw.bam',
	 filtre= OutDir+'1_hints/RNAseqHints/hints_{smp}.filtered.gff'
	shell:"""
	module load bioinfo/braker/1.9
	bam2hints --minintronlen=10 --maxintronlen=1000 --maxgaplen=9 --source=M --in={input.file} --out={output.bam2hints}
	filterHints.r -s {smp} -p '+resultMapping
	"""
	

rule exonerate :
	threads : 4
	input : protRef = protRef, file = datadir+"{smp}"+suffixFile
	output: exonerate = OutDir+'1_hints/ProtHints/exonarate_{smp}.gff3', hints =OutDir+'1_hints/ProtHints/exonarate_{smp}.hints.gff3'
	shell:"""
	module load bioinfo/exonerate/2.4.7
	module load bioinfo/braker/1.9
	exonerate --model protein2genome --percent 95 --showtargetgff T {input.protRef} {input.file} > {output.exonerate}
	exonerate2hints.pl --source=M --minintronlen=10 --maxintronlen=1000 --in={output.exonerate} --out={output.hints}
	"""
rule mergeHint:
	threads : 1
	input : rnaseq = OutDir+'1_hints/RNAseqHints/hints_{smp}.filtered.gff', prot = OutDir+'1_hints/ProtHints/exonarate_{smp}.hints.gff3'
	output: merge = OutDir+'1_hints/MergeHints/RNAseq_protein.hints_{smp}.gff', mergeIntro = OutDir+'1_hints/MergeHints/RNAseq_protein.hints.intron_{smp}.gff'
	shell :"""
	cat {input.rnaseq} {input.prot}  > {output.merge}
	awk '/intron/' {output.merge} > {output.mergeIntro}
	"""

rule BRAKER :
	threads : 2
	input : genome = datadir+"{smp}"+suffixFile, hints = OutDir+'1_hints/MergeHints/RNAseq_protein.hints.intron_{smp}.gff'
	output : OutDir+'2_Braker/{smp}/'
	shell :"""
	braker.pl --cores 24 --fungus --gff3 --species=magnaporthe_oryzae --useexisting --genome={input.genome} --hints={input.hints} --overwrite --alternatives-from-evidence=false --workingdir={output}
	"""
	
	
	
	
	
	
	
	
	
	
