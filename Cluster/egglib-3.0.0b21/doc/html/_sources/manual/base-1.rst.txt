---------------------------------------
Importing sequences in the Fasta format
---------------------------------------

The Fasta format is described formally in :ref:`fasta-format`. The function
:func:`.io.from_fasta` imports a Fasta-formatted file without any regard for
the kind of data it contains (DNA or RNA nucleotides, protein sequences).
Conformity to an alphabet is only enforced when you perform diversity analysis
or in specific cases such as protein translation or using external software.

Simplest case
=============

Let ``align1.fas`` be the name of a Fasta-formatted file containing an
alignment of DNA sequences. To import it as en EggLib object, all you have to do is run::

    import egglib
    aln = egglib.io.from_fasta('align1.fas')

The type of the object is :class:`.Align`, which is central to most of EggLib's functionality.
As a results, :class:`!Align` objects have a lot of methods, and they are accepted as arguments
by many other methods of the package. If you want to see the contents of an
:class:`!Align` object, the expression ``print aln`` will not be useful.
It will only give you an unique identifier of the object. This manual will
introduce some of the functionality offered by this class and its relative
:class:`.Container`, but to get started you can access the number of samples
and the alignment length by the object properties :attr:`.Align.ns` and :attr:`.Align.ls`::

    print aln.ns, aln.ls

Alignments and containers
=========================

The objects of type :class:`.Container` are very similar to :class:`.Align`
except that the number of data entries is allowed to vary between samples.
There are specifically designed to hold unaligned sequences. Much of
:class:`!Align`'s functionality is shared with :class:`!Container`.

Automatic detection of alignments
*********************************

There is no difference, in the Fasta format, between sequence alignments and
sets of unaligned sequences. By default, :func:`.io.from_fasta` detects automatically
whether all sequences have the same lengths: if so, it returns an
:class:`!Align`; otherwise, it returns a :class:`!Container`. You can test this by running::

    cnt = egglib.io.from_fasta('sequences1.fas')
    print type(cnt)
    print type(io)

Enforcing return type
*********************

In some cases you want to enforce the return type of :func:`.io.from_fasta`.
Typically, unaligned sequences may have the same length just by chance, making
the function returns a :class:`!Align` when a :class:`!Container` would
actually make sense. Conversely, malformed Fasta files may exist in large sets
of alignments, and forcing return types to be :class:`!Align` will help detect 
invalid files and process them accordingly.

To force the return type to be an :class:`!Align` or a :class:`!Container`, use the option *cls* of
:func:`!io.from_fasta` as follows::

    aln2 = egglib.io.from_fasta('align1.fas', cls=egglib.Align)
    cnt2 = egglib.io.from_fasta('align1.fas', cls=egglib.Container)

The object ``aln2`` will be an :class:`!Align`, and the object ``cnt2`` will be
a :class:`!Container`. Even if they contain actually the same data, you will not
be able to do the same things with them since they are actually supposed to represent
different things.

--------------
Exporting data
--------------

Exporting as Fasta
==================

All :class:`.Align`/:class:`.Container` objects have a method generating a Fasta
representation of the instance. The first argument of this method is the name
of an output file (*fname*)::

    aln.to_fasta('align_out.fas')

If the *fname* argument is omitted (or ``None``), the Fasta representation of
the set of sequences is returned as a string (built-in Python :class:`str` object)::

    print aln.to_fasta()

Other formats
=============

EggLib does not currently provide extended support for alternative data formats.

Sequence alignments can be exported to the following formats:

    * Output format of the `ms <http://home.uchicago.edu/rhudson1/source/mksamples.html>`_ software
      (:func:`.io.to_ms`).
    * NEXUS format (:meth:`.Align.nexus`).
    * Phylip phylogenetic software format (:meth:`.Align.phylip`).
    * PhyML phylogenetic software format (:meth:`.Align.phyml`).

Besides, sequence alignments can be imported from:

    * `Clustal <http://web.mit.edu/meme_v4.9.0/doc/clustalw-format.html>`_ alignment software format
      (:func:`.io.from_clustal`).
    * `Staden package <http://staden.sourceforge.net/>`_ software "contig dump" format
      (:func:`.io.from_staden`).
    * `Genalys <http://web.mit.edu/meme_v4.9.0/doc/clustalw-format.html>`_ software (which is discontinued) format
      (:func:`.io.from_genalys`).

.. _group-labels:

--------------------------
Structure and group labels
--------------------------

Principle
=========

To account for structure, EggLib uses a specific system that consists in attaching
labels to each samples. All samples bearing the same label are
supposed to belong to the same group. There can be several labels per samples, but
all samples are required to have the same number of labels. We sometimes refer to
an index among group labels as a *level*. Different levels of structure are aimed
to represent either nested levels of structure (clusters of populations and/or
populations and/or individuals) or alternative levels of structure. There are
little restrictions on group labels: they must be positive or null integers,
they are not required to be consecutive (they really are *group labels*,
not *group indexes*), and, if omitted, they are automatically set to 0.

All :class:`Align` and :class:`Container` objects have group labels. In the following
we explain how to specify group labels in Fasta file such as EggLib will properly
interpret them and store them within a :class:`!Align` instance.

Group labels in Fasta files
===========================

Single group label
******************

Let ``align2.fas`` be a Fasta file with six samples, the first three belonging to
population "1" and the other three belonging to population "2". EggLib
supports a specific system of tags within sequence headers in the Fasta format
to indicate group labels. The tags must appear as suffix starting with a ``@``
followed by an integer, as in the following example::

    >sample1 @1
    ACCGTGGAGAGCGCGTTGCA
    >sample2 @1
    ACCGTGGAGAGCGCGTTGCA
    >sample3 @1
    ACCGTGGAGAGCGCGTTGCA
    >sample4 @2
    ACCGTGGAGAGCGCGTTGCA
    >sample5 @2
    ACCGTGGAGAGCGCGTTGCA
    >sample6 @2
    ACCGTGGAGAGCGCGTTGCA

The space between the name and the tag is optional. ``>sample1@1`` will work just as well.
To import group labels, one is required to set the *groups* option of
:func:`!io.from_fasta` to ``True``::

    aln2 = egglib.io.from_fasta('align2.fas', groups=True)
    print aln2.get_name(0), aln2.get_label(0, 0)

::

    sample1 1

We will come back to the :meth:`.Align.get_name` and :meth:`.Align.get_label` methods. In this
case, the second line diplays the name of the first sample, and the first group label of the
first sample (remember that there may be several levels of structure). By default, the group
label tag will be treated as a part of the name::

    aln2 = egglib.io.from_fasta('align2.fas')
    print aln2.get_name(0)

::

    sample1@1

In that case, ``print aln2.get_label(0, 0)`` would cause an error because,
by default, there is no group labels at all included in :class:`!Align` objects.

Multiple group labels
*********************

There can be any number of group levels, either nested or not. To specify
several labels for a sample, on can write several integer values separated
by commas, as in the following example::

    >sample1 @1,1
    ACCGTGGAGAGCGCGTTGCA
    >sample2 @1,1
    ACCGTGGAGAGCGCGTTGCA
    >sample3 @1,1,1
    ACCGTGGAGAGCGCGTTGCA
    >sample4 @2,1,1
    ACCGTGGAGAGCGCGTTGCA
    >sample5 @2,2,1
    ACCGTGGAGAGCGCGTTGCA
    >sample6 @2,2,2
    ACCGTGGAGAGCGCGTTGCA

The example above also demonstrate that it is possible to omit group labels,
Although it is probably better to avoid it (because it is error-prone). The
number of group labels in the resulting objects is always equal across all
samples and in practice equal to the maximum number of labels (in the example,
three levels). The missing labels are set to 0. If an individual has no
labels at all (no ``@`` tag), all its labels are set to 0. As a result, if the
file shown above is saved as ``align3.fas``, the code::

    aln3 = egglib.io.from_fasta('align3.fas', groups=True)
    print aln3.get_name(0)
    print aln3.get_label(0, 0)
    print aln3.get_label(0, 1)
    print aln3.get_label(0, 2)

will yield::

    sample1
    1
    1
    0

Outgroup
========

EggLib allows including outgroup samples, particularly with the aim of
computing nucleotide diversity statistics requiring the identity of derived alleles.
They are supported by both :class:`!Align` and :class:`!Container` objects.
In the case of an alignment, the outgroup samples must be aligned with the other
ones, which are denoted ingroup.

In a Fasta file, outgroup samples appear alongside the ingroup (in any order).
When importing Fasta files, the ingroup and outgroup are separated based on
group labels (there is a special markup for the outgroup). The relative
position of ingroup and outgroup samples is unimportant.
Within :class:`!Align`/:class:`!Container` objects, they are stored separately,
in two distinct data tables (that are still required to have the same length
in the case of :class:`!Align`). Note that, as a result, ingroup and outgroup samples
will be separated if exported as Fasta.

The specific markup to identify an outgroup sample is ``@#``, as in the example below::

    >sample1 @1
    ACCGTGGAGAGCGCGTTGCA
    >sample2 @1
    ACCGTGGAGAGCGCGTTGCA
    >sample3 @1
    ACCGTGGAGAGCGCGTTGCA
    >sample4 @2
    ACCGTGGAGAGCGCGTTGCA
    >sample5 @2
    ACCGTGGAGAGCGCGTTGCA
    >sample6 @2
    ACCGTGGAGAGCGCGTTGCA
    >outgroup @#
    ACCGTGGAGAGCGCGTTGCA

Note that, if the group labels are not processed (by default), the outgroup can not
be processed as such, as exemplified below with the above file as ``align4.fas``::

    aln4 = egglib.io.from_fasta('align4.fas')
    print aln4.ns, aln4.no

    aln4 = egglib.io.from_fasta('align4.fas', groups=True)
    print aln4.ns, aln4.no

The attributes :attr:`~.Align.ns` and :attr:`~.Align.no` of :class:`!Align`/:class:`!Container` objects
give, respectively, the number of ingroup and outgroup samples. If group labels
are ignored, all samples are placed in the ingroup. The attribute :attr:`~.Align.ng`
gives the number of group levels.

Besides, group labels can be applied to outgroup as well (but only one level).
This is useful to group outgroup samples in individuals to process their
genotypes. The syntax if ``@#1`` (just add an integer label after the
outgroup markup). The default value is also 0.

---------
Iteration
---------

Principle of proxy types
========================

Both :class:`!Align` and :class:`!Container` classes are iterable (that is
they support the ``for item in aln4`` expression if we take the last
alignment we imported as example). Iteration steps yield objects of a
specialized type, named :class:`.SampleView`. :class:`!SampleView` objects
represent one sample of a :class:`!Align`/:class:`!Container`: the name
is accessible as the attribute :attr:`~.SampleView.name`, the sequence as
:attr:`~.SampleView.sequence` and the list of group labels as
:attr:`~.SampleView.group` (see example below). The name is a standard :class:`str` object,
but the sequence and list of group labels are other specialized types
(:class:`.SequenceView` and :class:`.GroupView`, respectively).

In addition to :attr:`!name`, :attr:`!sequence`, and :attr:`!group`,
:class:`!SampleView` objects have the following attribute, which cannot be
modified:

+-------------------------------+---------------------------------------------------------------------------------------+
| Attribute                     | Meaning                                                                               |
+-------------------------------+---------------------------------------------------------------------------------------+
| :attr:`~.SampleView.parent`   | Reference to the :class:`!Align` or :class:`!Continer` object containing this sample. |
+-------------------------------+---------------------------------------------------------------------------------------+
| :attr:`~.SampleView.outgroup` | ``True`` is the sample is part of the outgroup.                                       |
+-------------------------------+---------------------------------------------------------------------------------------+
| :attr:`~.SampleView.index`    | Index of the sample.                                                                  |
+-------------------------------+---------------------------------------------------------------------------------------+
| :attr:`~.SampleView.ls`       | Length of the sequence for this sample.                                               |
+-------------------------------+---------------------------------------------------------------------------------------+

All the three types :class:`.SampleView`, :class:`.SequenceView`, and
:class:`.GroupView` are proxy classes similar to
`dictionary views <https://docs.python.org/3.5/library/stdtypes.html#dictionary-view-objects>`_
in Python 3: they do not contain a deep copy of the :class:`!Align`/:class:`!Container`
data but rather act as a proxy to edit it more conveniently. As dictionary
views, if the content of the alignment changes, the data accessible from the
proxy might change or even disappear (causing an error), as we will show later.
In comparison with dictionary views, :class:`!Align`/:class:`!Container` proxy
types allow a wider range of editing operations, which will be addressed later
in this manual.

Default iteration
=================

The example below shows how to display the names of all samples of the ingroup
of the last alignment we considered::

    aln4 = egglib.io.from_fasta('align4.fas', groups=True)
    print aln.ns, aln.no
    for item in aln4:
        print item.name, item.outgroup

::

    6 1
    sample1 False
    sample2 False
    sample3 False
    sample4 False
    sample5 False
    sample6 False

Note that only samples of the ingroup are considered in this iteration. Only
the 6 samples of the ingroup (``aln4.ns`` returns 6) are shown, and the only
outgroup sample (as shown by ``aln4.no``) does not appear. This is proven by
the value of the boolean flag :attr:`.SampleView.outgroup` which is always ``False``.

Controlling iterations
======================

:class:`!Align`/:class:`!Container` objects provide two methods returning
iterators to complete the default behaviour of the ``for`` statement. One of
these methods allows to iterate over outgroup samples (:meth:`~.Align.iter_outgroup`)
and the other let you chose between ingroup, outgroup, or both (:meth:`~.Align.iter_samples`).
In short, they can used within a ``for`` statement as follow::

    for item in aln4.iter_outgroup():
        print item.name, item.outgroup

:meth:`!iter_samples` takes two boolean arguments tell whether the ingroup and
the outgroup (respectively) should be included. To iterate over all (both ingroup
and outgroup) sample of the alignment, one must set both flags to ``True``::

    for item in aln4.iter_samples(True, True):
        print item.name, item.outgroup

which would result in::

    sample1 False
    sample2 False
    sample3 False
    sample4 False
    sample5 False
    sample6 False
    outgroup True
