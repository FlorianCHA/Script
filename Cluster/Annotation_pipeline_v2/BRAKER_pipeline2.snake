import glob
import re
import sys
from os.path import join


###############################################################################
###############################################################################
# Adapt here so you can get all read pairs and ref:
#--------------------------------------------------
configfile: 'SupplementaryFile/config.json'
# directory contained fasta files
datadir=config["datadir"]

# Out directory
OutDir = config["OutDir"]

# RNAseq directory
RnaSeqDir=config["RnaSeqDir"]

# file termination
suffixFile = '.fasta'

# Identifiant de l'espÃ¨ce
id_souche =config["id_souche"]
################################################################################
################################################################################


################################################################################
# Config file for TOOGLE
configFile = 'SupplementaryFile/tophatMapping.config.txt' # A mettre dans l'outils
# Path to protein annotation file
protRef = config["protRef"]# A mettre dans l'outils
################################################################################


#################################################################################


SAMPLES, = glob_wildcards(datadir+"{smp}"+suffixFile)

	
rule final:
	input: 
		expand( OutDir+'5_final_data/{smp}/{smp}_protein.fasta', smp = SAMPLES),
		expand(OutDir+'6_report/report.html')
		

rule report:
	threads : 1
	input: assembly = OutDir+'6_report/data_report/Assembly_quality.csv', Annotation = OutDir+'6_report/data_report/Annotation_stat.csv'
	params : l_mem_free='4G'
	output: OutDir+'6_report/report.html'
	shell :"""
	module load bioinfo/R/3.4.3
	Rscript -e 'rmarkdown::render("script/report.Rmd", output_file="{output}", quiet=TRUE, params = list(assembly = "{input.assembly}", Annotation = "{input.Annotation}"))'
	"""
		


rule recuperation_Stat:
	threads : 1
	input : assembly = datadir,outdir = OutDir, lien = expand(OutDir+'4_mergeGFF/{smp}_merge.gff3',smp = SAMPLES)
	params : l_mem_free='4G'
	output : assembly = OutDir+'6_report/data_report/Assembly_quality.csv', Annotation = OutDir+'6_report/data_report/Annotation_stat.csv'
	shell : """"
	script/QualityAssemblage.py -d {input.assembly} -o {output.assembly}
	script/RecupInfoGFF.py -d {input.outdir}4_mergeGFF/ -o {output.Annotation} -g {input.assembly}
	"""

rule renameFasta:
	threads : 1
	input : OutDir+'5_final_data/{smp}/'
	params : l_mem_free='4G'
	output : OutDir+'5_final_data/{smp}/{smp}_protein.fasta'
	shell : """
	script/renameFasta.py -d {input} -s {wildcards.smp}
	"""

rule createFasta:
	threads : 1
	input : gff = OutDir+'4_mergeGFF/{smp}_merge.gff3', fasta = datadir+"{smp}"+suffixFile
	params : l_mem_free='4G'
	output : OutDir+'5_final_data/{smp}/'
	shell :"""
	script/gff2fasta.pl --gff {input.gff} --fasta {input.fasta} --prefix {output}{wildcards.smp}
	cp {input.gff} {output}
	"""

rule mergeGFF:
	threads : 1
	input : augustus = OutDir+'3_augustus/{smp}.gff3', braker = OutDir+'2_Braker/{smp}/'
	params : l_mem_free='4G', species = id_souche
	output : OutDir+'4_mergeGFF/{smp}_merge.gff3'
	message: 'Merge and rename Braker and Augustus output {wildcards.smp}.\nInput:\n\t\t-augustus : {input.augustus}\n\t\t-braker : {input.braker}/braker/'+id_souche+'/augustus.gff3\nOutput :{output}\nThreads : {threads}\n'+'#'*108
	shell : """
	script/mergeBraker_augustus.py  --augustus {input.augustus} --braker {input.braker}/braker/{params.species}/augustus.gff3 -o {output}
	"""

rule augustus :
	threads : 2
	input :  hints = OutDir+'1_hints/MergeHints/RNAseq_protein.hints_{smp}.gff' , assembly = datadir+"{smp}"+suffixFile
	params : l_mem_free='4G', species = id_souche
	output : OutDir+'3_augustus/{smp}.gff3'
	message: 'Execute augustus for {wildcards.smp}.\nInput:\n\t\t-Genome : {input.assembly}\n\t\t-Hints file : {input.hints}\nOutput :{output}\nThreads : {threads}\n'+'#'*108
	shell : """
	module load bioinfo/augustus/3.3.1
	augustus --hintsfile={input.hints} --species={params.species} {input.assembly} --gff3=on --outfile={output}
	"""

rule BRAKER :
	threads : 2
	input : genome = datadir+"{smp}"+suffixFile, hints = OutDir+'1_hints/MergeHints/RNAseq_protein.hints.intron_{smp}.gff'
	params : l_mem_free='10G', species = id_souche
	output : OutDir+'2_Braker/{smp}/'
	message: 'Execute BRAKER for {wildcards.smp}.\nInput:\n\t\t-Genome : {input.genome}\n\t\t-Hints file : {input.hints}\nOutput :{output}\nThreads : {threads}\n'+'#'*108
	shell :"""
	module load bioinfo/braker/1.9
	module load bioinfo/TOGGLE/0.3.6
	braker.pl --cores 24 --fungus --gff3 --species={params.species} --useexisting --genome={input.genome} --hints={input.hints} --overwrite --alternatives-from-evidence=false --workingdir={output}
		"""

if RnaSeqDir != 'None' and protRef != 'None':

	rule mergeHint:
		threads : 1
		input: rnaseq = OutDir + '1_hints/RNAseqHints/hints_{smp}.filtered.gff', prot = OutDir + '1_hints/ProtHints/exonerate_{smp}.hints.gff3'
		params: l_mem_free = '4G'
		output: merge = OutDir + '1_hints/MergeHints/RNAseq_protein.hints_{smp}.gff', mergeIntro = OutDir + '1_hints/MergeHints/RNAseq_protein.hints.intron_{smp}.gff'
		message: '\nMerge hints outcome of RNAseq with hints outcome of proteine alignement for {wildcards.smp}.\nInput:\n\t\t-Hints RNseq : {input.rnaseq}\n\t\t-Hints proteine : {input.prot}\nOutput :{output.mergeIntro}\nThreads : {threads}\n' + '#' * 108
		shell: """
			cat {input.rnaseq} {input.prot}  > {output.merge}
			awk '/intron/' {output.merge} > {output.mergeIntro}
			"""

elif  RnaSeqDir == 'None' :

	rule mergeHint:
		threads: 1
		input: prot = OutDir + '1_hints/ProtHints/exonerate_{smp}.hints.gff3'
		params: l_mem_free = '4G'
		output: merge = OutDir + '1_hints/MergeHints/RNAseq_protein.hints_{smp}.gff', mergeIntro = OutDir + '1_hints/MergeHints/RNAseq_protein.hints.intron_{smp}.gff'
		message: '\nMerge hints outcome of RNAseq with hints outcome of proteine alignement for {wildcards.smp}.\nInput:\n\t\t-Hints RNseq : {input.rnaseq}\n\t\t-Hints proteine : {input.prot}\nOutput :{output.mergeIntro}\nThreads : {threads}\n' + '#' * 108
		shell: """
			cat {input.prot}  > {output.merge}
			awk '/intron/' {output.merge} > {output.mergeIntro}
			"""

elif protRef == 'None':

	rule mergeHint:
		threads: 1
		input: rnaseq = OutDir + '1_hints/RNAseqHints/hints_{smp}.filtered.gff'
		params: l_mem_free = '4G'
		output: merge = OutDir + '1_hints/MergeHints/RNAseq_protein.hints_{smp}.gff', mergeIntro = OutDir + '1_hints/MergeHints/RNAseq_protein.hints.intron_{smp}.gff'
		message: '\nMerge hints outcome of RNAseq with hints outcome of proteine alignement for {wildcards.smp}.\nInput:\n\t\t-Hints RNseq : {input.rnaseq}\n\t\t-Hints proteine : {input.prot}\nOutput :{output.mergeIntro}\nThreads : {threads}\n' + '#' * 108
		shell: """
			cat {input.rnaseq} > {output.merge}
			awk '/intron/' {output.merge} > {output.mergeIntro}
			"""

rule exonerate :
	threads : 2
	input : protRef = protRef, file = datadir+"{smp}"+suffixFile
	params : l_mem_free='4G'
	output: exonerate = OutDir+'1_hints/ProtHints/exonerate_{smp}.gff3', hints =OutDir+'1_hints/ProtHints/exonerate_{smp}.hints.gff3'
	message: 'Executing exonerate alignement and convert alignement into hints file for {wildcards.smp}.\nInput:\n\t\t-Reference file : {input.protRef}\n\t\t-Genome : {input.file}\nOutput :\n\t\t-Alignement {output.exonerate}\n\t\t-hints file : {output.hints}\nThreads : {threads}\n'+'#'*108
	shell:"""
	module load bioinfo/exonerate/2.4.7
	module load bioinfo/braker/1.9
	exonerate --model protein2genome --percent 95 --showtargetgff T {input.protRef} {input.file} > {output.exonerate}
	exonerate2hints.pl --source=M --minintronlen=10 --maxintronlen=1000 --in={output.exonerate} --out={output.hints}
	"""	
	
rule bam2hintsFilter :
	threads : 1
	input : file = OutDir+'0_bamAlignement/{smp}/finalResults/hints_{smp}.raw.bam', path = OutDir+'0_bamAlignement/{smp}/'
	params : l_mem_free='4G'
	output : OutDir+'1_hints/RNAseqHints/hints_{smp}.filtered.gff'
	message: 'Filtre hint file outcome of bam file for {wildcards.smp}.\nInput: {input.file}\nOutput : {output}\nThreads : {threads}\n'+'#'*108
	shell:"""
	module load bioinfo/braker/1.9
	script/filterHintsSnake.r -s {wildcards.smp} -p {input.path}/finalResults/ -o {output}
	"""	
	
rule bam2hints :
	threads : 2
	input : OutDir+'0_bamAlignement/{smp}/finalResults/merged_{smp}.accepted_hits_sort.bam'
	params : l_mem_free='4G'
	output : bam2hints = OutDir+'0_bamAlignement/{smp}/finalResults/hints_{smp}.raw.bam'
	message: 'Convert merged bam file of {wildcards.smp} into a hint file for AUGUSTUS.\nInput:{input}\nOutput : {output}\nThreads : {threads}\n'+'#'*108
	shell:"""
	module load bioinfo/braker/1.9
	bam2hints --minintronlen=10 --maxintronlen=1000 --maxgaplen=9 --source=M --exonhints --in={input} --out={output}
	"""
	
rule sortBam :
	threads : 1
	input : OutDir+'0_bamAlignement/{smp}/finalResults/merged_{smp}.accepted_hits.bam'
	params : l_mem_free='40G'
	output : OutDir+'0_bamAlignement/{smp}/finalResults/merged_{smp}.accepted_hits_sort.bam'
	message: 'Sort the merged bam file of {wildcards.smp}.\nInput:{input}\nOutput : {output}\nThreads : {threads}\n'+'#'*108
	shell:"""
	module load bioinfo/picard-tools/2.7.0
	java -jar /usr/local/bioinfo/picard-tools/2.7.0/picard.jar SortSam I={input} O={output} SORT_ORDER=coordinate
	"""
	
	
rule mergeBam :
	threads : 1
	input :  bam = OutDir+'0_bamAlignement/{smp}/'
	params : l_mem_free='4G'
	output : OutDir+'0_bamAlignement/{smp}/finalResults/merged_{smp}.accepted_hits.bam'
	message: 'Merge all bam file of {wildcards.smp}.\nInput:{input}\nOutput : {output}\nThreads : {threads}\n'+'#'*108
	shell :"""
	module load bioinfo/samtools/1.3
	cd {input.bam}/finalResults
	ls *.accepted_hits.bam > bamList
	samtools merge -f -b bamList -c {output}
	"""	
	
rule bamAlignement :
	threads : 1
	input: fasta = datadir+"{smp}"+suffixFile, RNAseq = RnaSeqDir, config = configFile
	params : l_mem_free='4G'
	output: bam = OutDir+'0_bamAlignement/{smp}/', list = OutDir+'0_bamAlignement/{smp}/finalResults/bamList'
	message: 'Executing Tophat2 alignement for {wildcards.smp}.\nInput:\n\t\t-Genome : {input.fasta}\n\t\t-RNAseq : {input.RNAseq}\nOutput : {output}\nThreads : {threads}\n'+'#'*108
	log : 'log/bamAlignement_{wildcards.smp}.out'
	shell :"""
	module load bioinfo/TOGGLE/0.3.6
	rm -r {output.bam} 
	toggleGenerator.pl -d {input.RNAseq} -r {input.fasta} -c {input.config} -o {output.bam} 
	touch {output.list}
	"""







	
	
	
	
	
	
	
